#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/netfilter.h>
#include <linux/netfilter_ipv4.h>
#include <linux/ip.h>
#include <linux/tcp.h>
#include <linux/udp.h>
#include <linux/proc_fs.h>
#include <linux/sched.h>
#include <linux/uaccess.h>
#include <linux/slab.h>
#include <linux/list.h>
#include <inet.h>



#define DEBUG // Remove after you finish writing the project
#define PROC_NAME "my_proc"
#define TCP_ID 6
#define UDP_ID 17
/*#define NIPQUAD(addr)          \
    ((unsigned char *)&addr)[0], \
    ((unsigned char *)&addr)[1], \
    ((unsigned char *)&addr)[2], \
    ((unsigned char *)&addr)[3]
*/

int len,temp;

char *msg;


struct port_rules
{
    int parameter;
    bool    ingoing;
    bool    source;

    struct list_head list;
};

struct ip_rules
{
    char * parameter;
    bool    ingoing;
    bool    source;

    struct list_head list;
};

struct protocol_rules
{
    char * parameter;

    struct list_head list;
};



struct port_rules my_port_rules;
struct ip_rules my_ip_rules;
struct protocol_rules my_protocol_rules;


ssize_t read_proc(struct file *filp,char *buf,size_t count,loff_t *offp )
{
    if (count > temp)
    {
        count = temp;
    }

    temp = temp - count;
  
    copy_to_user(buf, msg, count);

    if(count == 0)
    {
        temp=len;
    }

    return count;
}

ssize_t write_proc(struct file *filp,const char *buf,size_t count,loff_t *offp)
{
    copy_from_user(msg,buf,count);
    len=count;
    temp=len;

    return count;
}

struct file_operations proc_fops = {
 read: read_proc,
 write: write_proc
};

static struct nf_hook_ops nfho;

enum protocol_type
{
    TCP,
    UDP
};
    
struct packet_headers
{
    char sourceIp[16];
    int sourcePort;
    char destIp [16];
    int destPort;
    int length;
    enum protocol_type protocol;
};

char * protocolToString(enum protocol_type protocol)
{
    switch (protocol)
    {
    case TCP:
        return "TCP";
        break;

    case UDP:
        return "UDP";
        break;
    default:
        return "non";
        
    }
}

int getString(char * dest, char * source, char divider, int offset)
{
    int i = offset;

    if (offset >= strlen(source))
    {
        return -1;
    }

    while (source[i] != divider)
    {
        dest[i] = source[i];
        i++;

        if (i >= strlen(source))
        {
            return -1;
        }
    }

    dest[i-1] = '\0';

    return i;
}

void copyString(char * dest, char * source, int offset)
{
    int  i = 0;

    while (offset < strlen(source))
    {
        dest[i] = source[offset];
        i++;
        offset++;
    }

    dest[i+1] = '\0';
}

bool scanPortRules(struct packet_headers packet, bool ingoing)
{
    struct list_head * pos;

    struct port_rules *tmp;
    
    list_for_each(pos, &my_port_rules.list)
    {
        tmp = list_entry(pos, struct port_rules, list);
        
        if (tmp->ingoing == ingoing)
        {
            if (tmp->source)
            {
                if (packet.sourcePort == tmp->parameter)
                {
                    return true;
                }
            }
            else
            {
                if (packet.destPort == tmp->parameter)
                {
                    return true;
                }
            }
        }
    }

    return false;
}


bool scanIpRules(struct packet_headers packet, bool ingoing)
{
    struct list_head * pos;

    struct ip_rules *tmp;
     
    list_for_each(pos, &my_ip_rules.list)
    {
        tmp = list_entry(pos, struct ip_rules, list);
        
        if (tmp->ingoing == ingoing)
        {
            if (tmp->source)
            {
                if (!strcmp(packet.sourceIp, tmp->parameter))
                {
                    return true;
                }
            }
            else
            {
                if (!strcmp(packet.destIp, tmp->parameter))
                {
                    return true;
                }
            }
        }
    }

    return false;
}



bool scanProtocolRules(struct packet_headers packet)
{
    struct list_head * pos;

    struct protocol_rules *tmp;
     
    list_for_each(pos, &my_protocol_rules.list)
    {
        tmp = list_entry(pos, struct protocol_rules, list);
        
        if (!strcmp(protocolToString(packet.protocol), tmp->parameter))
        {
            return true;               
        }
    }
        
    return false;
}


    
unsigned int hook_func(void *priv, struct sk_buff *skb, const struct nf_hook_state * state)
{
    struct iphdr *ip_header = (struct iphdr *)skb_network_header(skb); 
    struct tcphdr *tcp_header = NULL;
    struct udphdr *udp_header = NULL;

    struct packet_headers headers;

    
#ifdef DEBUG
    printk(KERN_ALERT "Hooked");
#endif

    snprintf(headers.destIp, 16, "%pI4", &ip_header->daddr);
    snprintf(headers.sourceIp, 16, "%pI4", &ip_header->saddr);
   

    if (ip_header->protocol == TCP_ID) //if the packet is tcp protocol 
    {
        printk(KERN_INFO "TCP Packet\n");
        tcp_header = (struct tcphdr *)(skb_transport_header(skb) + 20);
        headers.protocol = TCP; 

        if (tcp_header)
        {
            headers.sourcePort = (unsigned int)ntohs(tcp_header->source);
            headers.destPort = (unsigned int)ntohs(tcp_header->dest);
            printk(KERN_INFO "Source Port: %u\n Dest Port: %u\n", tcp_header->source, headers.destPort);
            
        }
    }
    else if (ip_header->protocol == UDP_ID)
    {
        printk(KERN_INFO "UDP Packet\n");
        udp_header = (struct udphdr *)(skb_transport_header(skb));
        headers.protocol = UDP;
        
        if (udp_header)
        {
            headers.sourcePort = (unsigned int)ntohs(udp_header->source);
            headers.destPort = (unsigned int)ntohs(udp_header->dest);
            printk(KERN_INFO "Source Port: %u\n Dest Port: %u\n", udp_header->source, headers.destPort);
        }
    }

    printk(KERN_INFO "Source IP: %s\n", headers.sourceIp);
    printk(KERN_INFO "Dest IP: %s\n", headers.destIp);

        if (scanPortRules(headers, true) || scanIpRules(headers, true) ||  scanProtocolRules(headers))
    {
        printk(KERN_INFO "dropped packet\n");
        
        return NF_DROP;
    }

    printk(KERN_INFO "packet accepted\n");
        
    return NF_ACCEPT;
}

void checkRules(void)
{
    struct port_rules * tmp;

    list_for_each_entry(tmp, &my_port_rules.list, list)
    {
        printk(KERN_INFO "my rules is: %d\n", tmp->parameter);
    }
}

void buildRules(void)
{
    struct port_rules * tmp;

    tmp = (struct port_rules *)kmalloc(sizeof(struct port_rules), GFP_KERNEL);

    INIT_LIST_HEAD(&tmp->list);

    tmp->parameter = 80;

    tmp->ingoing = true;

    tmp->source = true;

    list_add(&(tmp->list), &(my_port_rules.list));

    printk(KERN_INFO "finished building\n");

    checkRules();
}
    

void freeLists(void)
{
    struct list_head * pos, *q;

    struct port_rules * port_tmp;

    struct ip_rules * ip_tmp;

    struct protocol_rules * protocol_tmp;
    
    list_for_each_safe(pos, q, &my_port_rules.list)
    {
        port_tmp = list_entry(pos, struct port_rules, list);
        {
            list_del(pos);
            kfree(port_tmp);
        }
    }

    list_for_each_safe(pos, q, &my_ip_rules.list)
    {
        ip_tmp = list_entry(pos, struct ip_rules, list);
        {
            list_del(pos);
            kfree(ip_tmp);
        }
    }

    list_for_each_safe(pos, q, &my_protocol_rules.list)
    {
        protocol_tmp = list_entry(pos, struct protocol_rules, list);
        {
            list_del(pos);
            kfree(protocol_tmp);
        }
    }
}

int init_module()
{

    proc_create(PROC_NAME, 0, NULL, &proc_fops);
    msg=kmalloc(10*sizeof(char), GFP_KERNEL);

    printk(KERN_ALERT "Hello");
    nfho.hook = hook_func;                       
    nfho.hooknum = NF_INET_PRE_ROUTING;                                                                   
    nfho.pf = PF_INET;                        
    nfho.priority = NF_IP_PRI_FIRST;
    
    INIT_LIST_HEAD(&my_port_rules.list);
    INIT_LIST_HEAD(&my_ip_rules.list);
    INIT_LIST_HEAD(&my_protocol_rules.list);
    buildRules();
    nf_register_net_hook(&init_net, &nfho);
    return 0;                                    
}

void cleanup_module()
{
    kfree(msg);
    remove_proc_entry(PROC_NAME, NULL);
    printk(KERN_ALERT "Bye");
     nf_unregister_net_hook(&init_net, &nfho);
    freeLists();
} 





